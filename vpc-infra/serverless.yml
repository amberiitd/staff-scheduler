service: stf-sch-infra
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  region: ap-south-1
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}

plugins:
  - '@hybridless/serverless-ecs-plugin'
  - serverless-pseudo-parameters

custom:
  aws:
    profile: nazish
    accountId: 730746788960
  service: 
    port: 8080

resources:
  Resources:
    StaffSchedulerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn: !Ref StaffSchedulerElb
        Protocol: HTTP
        Port: 80
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref StaffSchedulerTargetGroup

    StaffSchedulerTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: ${self:service}-target-group
        Port: 80
        Protocol: HTTP
        VpcId: vpc-9fa78af7  # Replace with the ID of your VPC
        TargetType: ip
        HealthCheckPath: /health-check

    StaffSchedulerElb:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: ${self:service}-elb
        Scheme: internet-facing
        IpAddressType: ipv4
        Type: application 
        Subnets:
          - subnet-77c2793b
          - subnet-baa2e8d2
          - subnet-9a17d2e1
        SecurityGroups:
          - sg-099c66a6a74f51c4e

    MyApiGateway:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:provider.stage}-${self:service}
        EndpointConfiguration:
          Types:
            - EDGE
# schedule API
    MyApiResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: MyApiGateway
        ParentId:
          Fn::GetAtt:
            - MyApiGateway
            - RootResourceId
        PathPart: 'schedule'
    MyGetMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: MyApiGateway
        ResourceId:
          Ref: MyApiResource
        HttpMethod: 'GET'
        AuthorizationType: NONE
        Integration:
          Type: HTTP_PROXY
          IntegrationHttpMethod: GET
          Uri: !Sub "http://${StaffSchedulerElb.DNSName}/schedule"
    MyPostMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: MyApiGateway
        ResourceId:
          Ref: MyApiResource
        HttpMethod: 'POST'
        AuthorizationType: AWS_IAM
        Integration:
          Type: HTTP_PROXY
          IntegrationHttpMethod: POST
          Uri: !Sub "http://${StaffSchedulerElb.DNSName}/schedule"
    MyPutMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: MyApiGateway
        ResourceId:
          Ref: MyApiResource
        HttpMethod: 'PUT'
        AuthorizationType: AWS_IAM
        Integration:
          Type: HTTP_PROXY
          IntegrationHttpMethod: PUT
          Uri: !Sub "http://${StaffSchedulerElb.DNSName}/schedule"
    MyDeleteMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: MyApiGateway
        ResourceId:
          Ref: MyApiResource
        HttpMethod: 'DELETE'
        AuthorizationType: AWS_IAM
        Integration:
          Type: HTTP_PROXY
          IntegrationHttpMethod: DELETE
          Uri: !Sub "http://${StaffSchedulerElb.DNSName}/schedule"
    MyOptionsMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: MyApiGateway
        ResourceId:
          Ref: MyApiResource
        HttpMethod: 'OPTIONS'
        AuthorizationType: NONE
        Integration:
          Type: MOCK
          IntegrationResponses:
            - StatusCode: 200
              ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
          PassthroughBehavior: NEVER
          RequestTemplates:
            "application/json": "{\"statusCode\": 200}"
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true
    # User API
    MyUserApiResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: MyApiGateway
        ParentId:
          Fn::GetAtt:
            - MyApiGateway
            - RootResourceId
        PathPart: 'user'
    MyUserGetMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: MyApiGateway
        ResourceId:
          Ref: MyUserApiResource
        HttpMethod: 'GET'
        AuthorizationType: NONE
        Integration:
          Type: HTTP_PROXY
          IntegrationHttpMethod: GET
          Uri: !Sub "http://${StaffSchedulerElb.DNSName}/user"
    MyUserDeleteMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: MyApiGateway
        ResourceId:
          Ref: MyUserApiResource
        HttpMethod: 'DELETE'
        AuthorizationType: AWS_IAM
        Integration:
          Type: HTTP_PROXY
          IntegrationHttpMethod: DELETE
          Uri: !Sub "http://${StaffSchedulerElb.DNSName}/user"
    MyUserOptionsMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: MyApiGateway
        ResourceId:
          Ref: MyUserApiResource
        HttpMethod: 'OPTIONS'
        AuthorizationType: NONE
        Integration:
          Type: MOCK
          IntegrationResponses:
            - StatusCode: 200
              ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
          PassthroughBehavior: NEVER
          RequestTemplates:
            "application/json": "{\"statusCode\": 200}"
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true
# Analytics API
    MyAnalyticsApiResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId:
          Ref: MyApiGateway
        ParentId:
          Fn::GetAtt:
            - MyApiGateway
            - RootResourceId
        PathPart: 'analytics'
    MyAnalyticsPostMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: MyApiGateway
        ResourceId:
          Ref: MyAnalyticsApiResource
        HttpMethod: 'POST'
        AuthorizationType: AWS_IAM
        Integration:
          Type: HTTP_PROXY
          IntegrationHttpMethod: POST
          Uri: !Sub "http://${StaffSchedulerElb.DNSName}/analytics"

    MyAnalyticsOptionsMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: MyApiGateway
        ResourceId:
          Ref: MyAnalyticsApiResource
        HttpMethod: 'OPTIONS'
        AuthorizationType: NONE
        Integration:
          Type: MOCK
          IntegrationResponses:
            - StatusCode: 200
              ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
          PassthroughBehavior: NEVER
          RequestTemplates:
            "application/json": "{\"statusCode\": 200}"
        MethodResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Origin: true

  Outputs:
    StaffSchedulerTargetGroupArn:
      Value:
        Ref: StaffSchedulerTargetGroup
      Export:
        Name: StaffSchedulerTargetGroupArn

    MyApiGatewayId:
      Value:
        Ref: MyApiGateway
      Export:
        Name: MyApiGatewayId