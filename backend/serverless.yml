service: staff-scheduler
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  region: ap-south-1
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    HTTP_ENDPOINT: 'http://13.127.2.248/schedule'

plugins:
  - '@hybridless/serverless-ecs-plugin'
  - serverless-pseudo-parameters

custom:
  aws:
    profile: personal
    accountId: 343547439778
  service: 
    port: 8080
  ecs:
    clusterName: ${self:service}-cluster
    taskDefinition:
      family: ${self:service}-task-dev
      containerDefinitions:
        - name: ${self:service}-repo
          image: ${self:custom.aws.accountId}.dkr.ecr.${self:provider.region}.amazonaws.com/${self:service}-repo:latest
          portMappings:
            - name: ${self:service}-repo-${self:custom.service.port}-tcp
              containerPort: ${self:custom.service.port}
              hostPort: ${self:custom.service.port}
              protocol: tcp
              appProtocol: http
          essential: true
          environment:
          logConfiguration:
            logDriver: awslogs
            options:
              awslogs-create-group: true
              awslogs-group: "/ecs/${self:custom.ecs.taskDefinition.family}"
              awslogs-region: "${self:provider.region}"
              awslogs-stream-prefix: "ecs"

resources:
  Resources:
    StaffSchedulerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: StaffSchedulerRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: CloudWatchLogsPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "arn:aws:logs:${self:provider.region}:*:log-group:/ecs/*"
          - PolicyName: DynamoDBPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                    - dynamodb:GetItem
                  Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.stage}-schedule"
          - PolicyName: AdministratorPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: "*"
                  Resource: "*"

    StaffScheduleCluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: ${self:custom.ecs.clusterName}
        CapacityProviders:
          - FARGATE
          - FARGATE_SPOT
        DefaultCapacityProviderStrategy:
          - CapacityProvider: FARGATE
            Weight: 1
          - CapacityProvider: FARGATE_SPOT
            Weight: 1

    StaffSchedulerTaskDefinition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        Family: ${self:custom.ecs.taskDefinition.family}
        NetworkMode: awsvpc
        ContainerDefinitions: ${self:custom.ecs.taskDefinition.containerDefinitions}
        RequiresCompatibilities:
          - FARGATE
        Memory: "512"
        Cpu: "256"
        ExecutionRoleArn: !GetAtt StaffSchedulerRole.Arn
        RuntimePlatform:
          # Define the RuntimePlatform properties here
          cpuArchitecture: X86_64
          operatingSystemFamily: LINUX

    StaffSchedulerService:
      Type: AWS::ECS::Service
      Properties:
        Cluster: !Ref StaffScheduleCluster
        DeploymentConfiguration:
          MaximumPercent: 200
          MinimumHealthyPercent: 100
        DesiredCount: 1
        HealthCheckGracePeriodSeconds: 0
        LoadBalancers:
          - ContainerName: ${self:service}-repo
            ContainerPort: ${self:custom.service.port}
            TargetGroupArn: !ImportValue StaffSchedulerTargetGroupArn
        TaskDefinition: !Ref StaffSchedulerTaskDefinition
        ServiceName: ${self:service}-service
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: ENABLED  # Choose "ENABLED" or "DISABLED" based on your requirements
            Subnets:
              - subnet-0f2f0f3511b92435f
              - subnet-03130abf6efde5935
              - subnet-0b25b3474b72782cf
            SecurityGroups:
              - sg-0976513226a6d611a

    MyApiDeployment:
      Type: AWS::ApiGateway::Deployment
      Properties:
        RestApiId: !ImportValue MyApiGatewayId

    MyApiStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        StageName: ${self:provider.stage} # Replace 'dev' with the desired stage name
        RestApiId: !ImportValue MyApiGatewayId
        DeploymentId:
          Ref: MyApiDeployment